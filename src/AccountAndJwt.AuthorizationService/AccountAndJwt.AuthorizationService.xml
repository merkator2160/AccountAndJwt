<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AccountAndJwt.AuthorizationService</name>
    </assembly>
    <members>
        <member name="T:AccountAndJwt.AuthorizationService.Controllers.AccountController">
            <summary>
            Provide authorization activities
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.Register(AccountAndJwt.Contracts.Models.RegisterUserAm)">
            <summary>
            Register new user by provided credentials
            </summary>
            <param name="userDetails"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.DeleteAccount(System.Int32)">
            <summary>
            [Auth=(admin)] Delete existed account by it id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.AddRole(AccountAndJwt.Contracts.Models.AddRemoveRoleAm)">
            <summary>
            [Auth=(admin)] Add role to user with specified id
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.RemoveRole(AccountAndJwt.Contracts.Models.AddRemoveRoleAm)">
            <summary>
            [Auth=(admin)] Delete role from user with specified id
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.ChangeEmail(System.String)">
            <summary>
            [Auth] Change E-Mail of current user
            </summary>
            <param name="newEmail"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.ChangeName(AccountAndJwt.Contracts.Models.ChangeNameRequestAm)">
            <summary>
            [Auth] Change current user First and Last name by provided id
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.GetUser(System.Int32)">
            <summary>
            [Auth=(admin)] Get information about user by provided id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.GetAllUsers">
            <summary>
            [Auth=(admin)] Get information about all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.AccountController.ResetPassword(AccountAndJwt.Contracts.Models.ResetPasswordAm)">
            <summary>
            [Auth] Changing current user password
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:AccountAndJwt.AuthorizationService.Controllers.Testing.CoreTestController">
            <summary>
            This controller only for integration testing purposes (it does not appear in production)
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.CoreTestController.BasicTest">
            <summary>
            This test only checks controller availability
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.CoreTestController.ContextReferenceTest">
            <summary>
            This test returns reference equality information about two two injected data contexts, reference should be the same
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.CoreTestController.UnhandledExceptionTest">
            <summary>
            Throws an unhandled exception
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.CoreTestController.UnhandledApplicationExceptionTest">
            <summary>
            Throws an unhandled application exception
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.CoreTestController.GetCurrentUserClaims">
            <summary>
            Returns collection of claims assigned to the current user from provided JWT token
            </summary>
        </member>
        <member name="T:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController">
            <summary>
            This controller only for debugging, playing, testing purposes (it does not appear in production)
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController.WriteLog(System.String)">
            <summary>
            Creates a log entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController.GetAspNetEnvironment">
            <summary>
            Returns current environment name retrieved from IWebHostEnvironment
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController.GetRawEnvironmentVariable">
            <summary>
            Returns a raw current server environment variable value introduced in current server global environment variables pool
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController.GetRawEnvironmentVariableName">
            <summary>
            Returns name of the variable which uses to determine current server environment
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController.GetAvailableRepositories">
            <summary>
            Returns information about available repositories for the primary database 
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.DebugController.GetExternalIpAddress">
            <summary>
            Returns current internet IP address
            </summary>
        </member>
        <member name="T:AccountAndJwt.AuthorizationService.Controllers.Testing.ValueController">
            <summary>
            Simple values controller
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.ValueController.GetAll">
            <summary>
            [Auth] Retrieves all values
            </summary>
            <remarks>Awesomeness!</remarks>
            <response code="200">Values take it</response>
            <response code="500">Oops! Can't get values right now</response>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.ValueController.Get(System.Int32)">
            <summary>
            [Auth] Retrieve specific value by unique id
            </summary>
            <remarks>Awesomeness!</remarks>
            <response code="200">Value founded</response>
            <response code="400">Value has missing/invalid values</response>
            <response code="500">Oops! Can't get your value right now</response>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.ValueController.Post(AccountAndJwt.Contracts.Models.AddValueAm)">
            <summary>
            [Auth] Add new value
            </summary>
            <remarks>Awesomeness!</remarks>
            <response code="200">Value created</response>
            <response code="500">Oops! Can't create your value right now</response>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.ValueController.Put(AccountAndJwt.Contracts.Models.ValueAm)">
            <summary>
            [Auth] Change value with desired id
            </summary>
            <remarks>Awesomeness!</remarks>
            <response code="200">Value changed</response>
            <response code="400">Value has missing/invalid values</response>
            <response code="500">Oops! Can't update your value right now</response>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.Testing.ValueController.Delete(System.Int32)">
            <summary>
            [Auth] Delete value with desired id
            </summary>
            <remarks>Awesomeness!</remarks>
            <response code="200">Value deleted</response>
            <response code="400">Value has missing/invalid values</response>
            <response code="500">Oops! Can't delete your value right now</response>
        </member>
        <member name="T:AccountAndJwt.AuthorizationService.Controllers.TokenController">
            <summary>
            Provides operations under JWT access tokens for the whole API
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.TokenController.AuthorizeByCredentials(AccountAndJwt.Contracts.Models.AuthorizeRequestAm)">
            <summary>
            Creates the access-token by username and password
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.TokenController.RefreshToken(System.String)">
            <summary>
            Creates new access token by provided refresh token
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Controllers.TokenController.RevokeToken(System.String)">
            <summary>
            Makes provided refresh token invalid
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Middleware.ErrorHandlingMiddleware.UseGlobalExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            It don't allow information from unhandled exceptions leave application borders. 
            Also provides these exceptions logging.
            </summary>
        </member>
        <member name="T:AccountAndJwt.AuthorizationService.Middleware.Hangfire.HangfireMiddleware">
            <summary>
            https://stackoverflow.com/questions/44383174/hangfire-with-horizontal-scaling
            https://stackoverflow.com/questions/42201809/hangfire-recurring-job-on-every-server/42202844
            http://docs.hangfire.io/en/latest/background-processing/configuring-queues.html
            </summary>
        </member>
        <member name="M:AccountAndJwt.AuthorizationService.Middleware.OdataMiddleware.AddOdataMediaTypes(Microsoft.AspNetCore.Mvc.MvcOptions)">
            <summary>
            ODate endpoints fix for Swagger
            Workaround: https://github.com/OData/WebApi/issues/1177
            </summary>
        </member>
    </members>
</doc>
